{"success": false, "error": "Traceback (most recent call last):\n  File \"securify/__main__.py\", line 290, in main\n    matches.extend(pattern.find_matches())\n  File \"/home/smartcontract/SmartContract/securify2-master/securify/analyses/patterns/ast/naming_convention_pattern.py\", line 17, in find_matches\n    ast_root = self.get_ast_root()\n  File \"/home/smartcontract/SmartContract/securify2-master/securify/analyses/patterns/ast/abstract_ast_pattern.py\", line 18, in get_ast_root\n    ast_root = self.analysis_context.ast\n  File \"/home/smartcontract/SmartContract/securify2-master/securify/analyses/analysis.py\", line 74, in ast\n    self._ast = self.config.ast_compiler(self)\n  File \"securify/__main__.py\", line 266, in <lambda>\n    ast_compiler=lambda t: solidity_ast_compiler.compile_ast(t.source_file),\n  File \"/home/smartcontract/SmartContract/securify2-master/securify/solidity/solidity_ast_compiler.py\", line 31, in compile_ast\n    compile_output = compile_standard(compile_input, allow_paths='/')\n  File \"/home/smartcontract/SmartContract/securify2-master/venv/lib/python3.7/site-packages/solc/main.py\", line 181, in compile_standard\n    message=error_message,\nsolc.exceptions.SolcError: fixed_pragma.sol:1791:30: TypeError: The \"chainid\" instruction is only available for Istanbul-compatible VMs  (you are currently compiling for \"petersburg\").\nassembly {chainId := chainid()}\n                     ^-------^\n\n> command: `solc --allow-paths / --standard-json`\n> return code: `0`\n> stderr:\n{\"errors\":[{\"component\":\"general\",\"formattedMessage\":\"fixed_pragma.sol:1791:30: TypeError: The \\\"chainid\\\" instruction is only available for Istanbul-compatible VMs  (you are currently compiling for \\\"petersburg\\\").\\n        assembly {chainId := chainid()}\\n                             ^-------^\\n\",\"message\":\"The \\\"chainid\\\" instruction is only available for Istanbul-compatible VMs  (you are currently compiling for \\\"petersburg\\\").\",\"severity\":\"error\",\"sourceLocation\":{\"end\":67104,\"file\":\"fixed_pragma.sol\",\"start\":67095},\"type\":\"TypeError\"}],\"sources\":{}}\n\n> stdout:\n", "results": []}