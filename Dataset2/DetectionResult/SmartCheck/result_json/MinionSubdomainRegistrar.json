[{"severity":1,"argument":"SOLIDITY_PRAGMAS_VERSION","starting_column":16,"description_val":"^0.5.0; (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#1\n","context_ling":1,"text":"^"},{"severity":1,"argument":"SOLIDITY_SHOULD_RETURN_STRUCT","starting_column":48,"description_val":"(address, uint256, uint256, bool, uint256, uint256); (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#52\n","context_ling":52,"text":"("},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":3,"description_val":"function supportsInterface(bytes4 interfaceID) public pure returns (bool); (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#42\n","context_ling":42,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":3,"description_val":"function addr(bytes32 node) public view returns (address); (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#43\n","context_ling":43,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function transferOwnership(address newOwner) public registrar_owner_only { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#110\n","context_ling":110,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function setMigrationAddress(address _migration) public registrar_owner_only { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#118\n","context_ling":118,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function stop() public not_stopped registrar_owner_only { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#126\n","context_ling":126,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function transfer(string memory name, address newOwner) public owner_only(keccak256(bytes(name))) { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#149\n","context_ling":149,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function unlistDomain(string memory name) public owner_only(keccak256(bytes(name))) { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#160\n","context_ling":160,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function configureDomain(string memory name, address minion) public { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#175\n","context_ling":175,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function configureDomainFor(string memory name, address minion, address _owner) public not_stopped owner_only(keccak256(bytes(name))) { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#185\n","context_ling":185,"text":"function"},{"severity":1,"argument":"SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL","starting_column":4,"description_val":"function migrate(string memory name) public owner_only(keccak256(bytes(name))) { (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#215\n","context_ling":215,"text":"function"},{"severity":1,"argument":"SOLIDITY_VISIBILITY","starting_column":4,"description_val":"mapping (bytes32 => Domain) domains; (tests_etherscan/dataset_etherscan/MinionSubdomainRegistrar.sol)#78\n","context_ling":78,"text":"mapping"}]